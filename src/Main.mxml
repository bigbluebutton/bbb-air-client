<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:top="org.bigbluebutton.top.view.*"
			   xmlns:navigation="org.bigbluebutton.view.navigation.*" 
			   xmlns:presentation="org.bigbluebutton.view.navigation.pages.presentation.*" 
			   xmlns:ui="org.bigbluebutton.view.ui.*" 
			   xmlns:common="org.bigbluebutton.view.navigation.pages.common.*" 
			   xmlns:loading="org.bigbluebutton.view.ui.loading.*"
			   styleName="mainshellStyle"
			   preinitialize="preinitializeHandler(event)" 
			   creationComplete="creationCompleteHandler(event)"
			   applicationComplete="applicationCompleteHandler(event)" 	
			   runtimeDPIProvider = "CustomRuntimeDPIProvider"
			   >
	<fx:Style source="Default.css"/>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.LocaleUtil;
			
			import flash.system.Capabilities;
			
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			
			import org.bigbluebutton.AppConfig;
			import org.bigbluebutton.core.util.OrientationCalculator;
			import org.bigbluebutton.core.view.NoTabView;
			import org.bigbluebutton.model.UserSession;
			import org.bigbluebutton.util.BigBlueButtonLoggerFactory;
			import org.bigbluebutton.view.navigation.PagesNavigatorConfig;
			import org.bigbluebutton.view.navigation.pages.PagesENUM;
			import org.bigbluebutton.view.navigation.pages.TransitionAnimationENUM;
			import org.bigbluebutton.view.navigation.pages.chat.ChatConfig;
			import org.bigbluebutton.view.navigation.pages.chatrooms.ChatRoomsConfig;
			import org.bigbluebutton.view.navigation.pages.common.MenuButtonsConfig;
			import org.bigbluebutton.view.navigation.pages.deskshare.DeskshareConfig;
			import org.bigbluebutton.view.navigation.pages.disconnect.DisconnectPageConfig;
			import org.bigbluebutton.view.navigation.pages.login.LoginPageConfig;
			import org.bigbluebutton.view.navigation.pages.participants.ParticipantsConfig;
			import org.bigbluebutton.view.navigation.pages.presentation.PresentationConfig;
			import org.bigbluebutton.view.navigation.pages.profile.ProfileConfig;
			import org.bigbluebutton.view.navigation.pages.selectparticipant.SelectParticipantConfig;
			import org.bigbluebutton.view.navigation.pages.userdetails.UserDetailsConfig;
			import org.bigbluebutton.view.navigation.pages.videochat.VideoChatConfig;
			import org.bigbluebutton.view.ui.MicButtonConfig;
			import org.bigbluebutton.view.ui.NavigationButtonConfig;
			import org.bigbluebutton.view.ui.SwapCameraConfig;
			import org.bigbluebutton.view.ui.loading.LoadingScreenConfig;
			import org.osmf.logging.Log;
			import org.osmf.logging.Logger;
			
			import robotlegs.bender.bundles.mvcs.MVCSBundle;
			import robotlegs.bender.extensions.contextView.ContextView;
			import robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension;
			import robotlegs.bender.framework.api.IContext;
			import robotlegs.bender.framework.api.LogLevel;
			import robotlegs.bender.framework.impl.Context;		
			
			protected var context: IContext;
			
			private var _orientationCalc:OrientationCalculator;
			public var currentOrientation:String;
			
			protected function preinitializeHandler(event:FlexEvent):void
			{
				setupContext();
				setupLogger();
				resizeForSoftKeyboard = true;
				
				//NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvokeEvent);
				
				ResourceManager.getInstance().localeChain = LocaleUtil.sortLanguagesByPreference(['en_US', 'pt_BR'], Capabilities.languages, "en_US");
			}
			/*
			public function onInvokeEvent(invocation:InvokeEvent):void 
			{
			var traceString:String = "";
			
			var arguments:Array = invocation.arguments;
			var currentDir:File = invocation.currentDirectory;
			var reason:String = invocation.reason;
			traceString += "-----InvokeEvent.INVOKE----\n";
			traceString += "arguments: "+arguments.toString()+"\n\n";
			traceString += "currentDir: "+currentDir+"\n\n";
			traceString += "reason: "+reason+"\n\n";
			
			var url:String = arguments.toString().replace('bigbluebutton://', 'http://');
			
			traceString += "url: "+url+"\n\n";
			
			traceText.text += traceString;
			}
			*/
			/**
			 * Sets up the Robotlegs context.
			 */
			private function setupContext(): void
			{
				context = new Context()
					.install(MVCSBundle, SignalCommandMapExtension)
					.configure(AppConfig)
					
					.configure(LoadingScreenConfig)
					.configure(PagesNavigatorConfig)
					.configure(PresentationConfig)
					.configure(LoginPageConfig)
					.configure(ChatConfig)
					.configure(ChatRoomsConfig)
					.configure(VideoChatConfig)
					.configure(ProfileConfig)
					.configure(UserDetailsConfig)
					.configure(ParticipantsConfig)
					.configure(SelectParticipantConfig)		
					.configure(MicButtonConfig)
					.configure(NavigationButtonConfig)
					.configure(SwapCameraConfig)
					.configure(DisconnectPageConfig)
					.configure(DeskshareConfig)
					.configure(MenuButtonsConfig)
					
					.configure(new ContextView(this));
				
				// If you wish to change the log level then uncomment the line below and set 
				// the logLevel to the value you desire. The default logLevel is DEBUG, which 
				// is set in the MVCSBundle. The default log level traces out the framework 
				// actions, which can assist in learning Robotlegs.
				setLogLevel();
			}
			
			/**
			 * Sets the logLevel for the robotegs context.
			 */
			private function setLogLevel(): void
			{
				// setting the logLevel to WARN means that robotlegs
				// will also notify us about ERROR & FATAL.
				context.logLevel = LogLevel.WARN;
			}
			
			private function setupLogger():void
			{
				Log.loggerFactory = new BigBlueButtonLoggerFactory(); 
				var logger:Logger = Log.getLogger("org.bigbluebutton");
				logger.info("Logger on");
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				
			}
			
			protected function applicationCompleteHandler(event:FlexEvent):void
			{
				stage.addEventListener(Event.ACTIVATE, fl_Activate);
				stage.addEventListener(Event.DEACTIVATE, fl_Deactivate);
				
				stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGING, stageOrientationChangingHandler);
				
				// setup a custom orientation calculator based on the accelerometer because the default one doesn't work
				_orientationCalc = new OrientationCalculator(pagesNavigatorView, accelerometerCallback);
				_orientationCalc.active = true;
				currentOrientation = _orientationCalc.currentOrientation;
			}
			
			private function fl_Activate(event:Event=null):void {
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
			}
			
			private function fl_Deactivate(event:Event):void {
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.NORMAL;
			}
			
			private function stageOrientationChangingHandler(e:StageOrientationEvent):void {
				e.preventDefault();
			}
			
			private function accelerometerCallback():void {
				currentOrientation = _orientationCalc.currentOrientation;
				(pagesNavigatorView.activeView as NoTabView).rotationHandler(_orientationCalc.currentOrientation);
			}			

			protected function button_clickHandler(event:MouseEvent):void
			{
				backBtn.visible=false;
				backBtn.includeInLayout=false;
				profileBtn.visible=true;
				profileBtn.includeInLayout=true;
			}
			
			protected function profileBtn_clickHandler(event:MouseEvent):void
			{
				backBtn.visible=true;
				backBtn.includeInLayout=true;
				profileBtn.visible=false;
				profileBtn.includeInLayout=false;
			}

		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata> 
	
	<loading:LoadingScreen width="100%" height="100%" />
	
	<s:Group width="100%" height="100%" id="mainshell" visible="false">
		<s:layout>
			<s:VerticalLayout />
		</s:layout>
		<s:Group width="100%" id="topActionBar" >
			<s:Rect  height="100%" width="100%">
				<s:fill>
					<s:SolidColor color="{getStyle('topActionBarColor')}" />
				</s:fill>
			</s:Rect>
			<s:HGroup width="100%" height="100%">					
				<ui:NavigationButton id="profileBtn" click="profileBtn_clickHandler(event)" 					 
										styleName="profileButtonStyle topButtonStyle "
										navigateTo="{[PagesENUM.PROFILE]}"
										transitionAnimation="{TransitionAnimationENUM.SLIDE_LEFT}"
										height="100%" />
				<ui:NavigationButton id="backBtn" visible="false" includeInLayout="false" click="button_clickHandler(event)"
										styleName="backButtonStyle topButtonStyle"
										navigateTo="{[PagesENUM.LAST]}"
										transitionAnimation="{TransitionAnimationENUM.SLIDE_RIGHT}"
										height="100%"/>   
				<s:Label id="pageName" styleName="pageNameStyle"  width="100%" />
				<ui:SwapCameraButton id="swapCameraBtn" visible="false" styleName="swapCameraButtonStyle topButtonStyle" height="100%" />
				<ui:MicButton id="microphoneBtn" styleName="micButtonStyle topButtonStyle" height="100%" />	
			</s:HGroup>
		</s:Group>

		<navigation:PagesNavigatorView id="pagesNavigatorView" width="100%" height="100%"/>	
    	<common:MenuButtonsView id="bottomMenu" width="100%"  click="button_clickHandler(event)"/>
	</s:Group>	
</s:Application>
